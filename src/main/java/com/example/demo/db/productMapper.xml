<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="product">


  <!--관리자 상품 리스트-->	
  <select id="findAll" resultType="productVO">
    	select no ,pro_name, pro_brand, pro_price, pro_saleprice, pro_stock, PRO_THUMBNAIL from (
		select rownum num, no ,pro_name, pro_brand, pro_price, pro_saleprice, pro_stock, PRO_THUMBNAIL  from
		(select no, pro_name, pro_brand, pro_price, pro_saleprice, pro_stock, PRO_THUMBNAIL  from PRODUCT 
			<if test="keyword != null">
				where pro_name like '%'||#{keyword}||'%' 
			</if>				 
		))
		where num between #{start} and #{end}     
		
  </select>  
	
 
 
  <select id="totalRecord" resultType="java.lang.Integer">
  	select count(*) from product 
  	<if test="keyword != null">
			where pro_name like '%'||#{keyword}||'%' 
	</if>
  </select>
  
  
  <!-- 상품 일반 유저(home)-->	
  <select id="findAll_home" resultType="productVO">
     select no ,pro_name, pro_brand, pro_price, pro_saleprice, PRO_THUMBNAIL
	 from product 
	 <if test="cat_code !=null">
	 		where cat_code=#{cat_code}
	 </if>
	 
	 <if test="keyword != null">
			where pro_name like '%'||#{keyword}||'%' 
	 </if>
	 
	 <if test="filter != null">
			order by ${filter} desc
	 </if>
	 
	 <if test="filterASC != null">
			order by ${filterASC}  
	 </if>	 
 </select>
  
  
  
  <!-- 상품 상세 -->
  <select id="findByNo" resultType="productVO"> 
  	select no, pro_name, pro_brand, pro_price, pro_saleprice,pro_stock, pro_delivery, pro_hit, pro_content, pro_thumbnail, c.cat_name 
	from product p, category c
	where no=#{no} and
    p.cat_code=c.cat_code
 </select>
  
  <!-- 상품에 있는 옵션값 전체 찾기-->
 <select id="findOption" resultType="productVO">   	 
	select 
	pro_option_name, pro_option_detail_name, pro_add_price, sum(pro_saleprice + pro_add_price)sum, pao.pro_option_detail_code pro_option_detail_code, po.pro_option_code pro_option_code 
	from 
	pro_add_option pao,pro_option po, pro_option_detail pod, product p
	where 
	pao.pro_option_code = po.pro_option_code 
	and
	pao.pro_option_detail_code = pod.pro_option_detail_code 
	and
	pro_no=#{pro_no}
	GROUP BY pro_option_name, pro_option_detail_name, pro_add_price, pao.pro_option_detail_code,po.pro_option_code     
	order by pro_option_name
 
 </select> 
 
  
  
 <select id="findOptionView" resultType="java.lang.Integer">   		
 	select count( distinct pro_option_code)cnt from pro_add_option where pro_no=#{no}
 </select>
 
 <!-- 상품에 있는 옵션이름 찾기(leve1) -->
  <select id="findOptionName" resultType="productVO" >
 	select distinct po.pro_option_code as pro_option_code, pro_option_name
	from pro_option po, pro_add_option pao
	where po.pro_option_code= pao.pro_option_code and
	pao.pro_no=#{no}
 </select>		
 
 <!-- 상품에 있는 자세한 옵션 이름 찾기(leve2) -->
  <select id="findOptionDetailName" resultType="productVO" >
 	select distinct pao.pro_option_detail_code pro_option_detail_code, pro_option_detail_name
	from pro_option_detail pod, pro_add_option pao,pro_option po
	where pod.pro_option_detail_code= pao.pro_option_detail_code and
    po.pro_option_code =pao.pro_option_code and
	pao.pro_no=#{no} and 
	po.pro_option_name=#{pro_option_name}
 </select>
 
 
 
 
 
 
 
  
 <!-- 옵션값 전체 찾기 (leve1)-->
 <select id="findDBOption" resultType="productVO" >
  select pro_option_name, pro_option_code
			from  pro_option 
 </select>
 
 <!--   leve1에 따른 자세한 옵션 찾기-->
 <select id="findDBDetailOption" resultType="productVO" >
  	select distinct pao.pro_option_detail_code, pro_option_detail_name
	from pro_option_detail pod, pro_option po, pro_add_option pao
	where pao.pro_option_code=#{pro_option_code} and
	po.pro_option_code=pao.pro_option_code and
	pao.pro_option_detail_code=pod.pro_option_detail_code
 </select>		 
 
	
 
  
  <insert id="insert" parameterType="productVO">
   	insert into product values(
    seq_product.nextval,
   #{pro_name},
    #{pro_brand},
    #{pro_price},
    #{pro_saleprice},
    #{pro_stock},
    #{pro_delivery},
             sysdate,
             0,             
    #{pro_content},
    #{cat_code},
    #{PRO_THUMBNAIL}
    )
  </insert>
 
   
   <!-- 상품 수정-->
  <update id="update" parameterType="productVO">
  	update product set  cat_code=#{cat_code}, pro_name=#{pro_name},pro_brand=#{pro_brand},pro_price=#{pro_price},pro_saleprice=#{pro_saleprice},pro_stock=#{pro_stock},pro_content=#{pro_content},PRO_THUMBNAIL=#{PRO_THUMBNAIL} where no=#{no}
  </update>
  
   <!-- 상품 삭제-->
  <delete id="delete">
  	delete product where no=#{no}
  </delete>
  
   <!-- 상품 조회수-->
  <update id="updateHit">
  	update product set pro_hit=pro_hit+1 where no=#{no}
  </update>
  
  <update id="updateStockcuzBuy">
  	UPDATE product set pro_stock = (SELECT pro_stock FROM product WHERE no=#{pro_no}) - #{ord_pro_qty} WHERE no = #{pro_no}
  </update>
</mapper>